import { HttpService } from '@nestjs/axios';
import { Injectable } from '@nestjs/common';
import { lastValueFrom } from 'rxjs';
import { Ecosystem } from '../models/ecosystem.model.js';
import { validateEnvs } from '../utils/env.util.js';
import { securityVulnerabilities } from './dto/securityVulnerabilities.js';

export type DetectPackageVulnerabilities = Record<
  string,
  {
    name: string;
    version: string;
  }
>;

@Injectable()
export class GithubApiService {
  constructor(private readonly httpService: HttpService) {}

  private readonly apiUrl = 'https://api.github.com/graphql' as const;

  async queryGitHubGraphQL(query: string) {
    const { GITHUB_ACCESS_TOKEN } = validateEnvs();
    try {
      const response = this.httpService.post(
        this.apiUrl,
        { query },
        {
          headers: {
            Authorization: `bearer ${GITHUB_ACCESS_TOKEN}`,
            'Content-Type': 'application/json',
          },
        },
      );

      const { data } = await lastValueFrom(response);
      return data;
    } catch (error) {
      throw error;
    }
  }

  async securityVulnerabilities(
    ecosystem: Ecosystem,
    packages: DetectPackageVulnerabilities,
  ) {
    const packageQueries = Object.keys(packages).map((name) => {
      return `${this.removeHyphens(
        name,
      )}: securityVulnerabilities(ecosystem: ${ecosystem}, package: "${name}", first: 10) {
          nodes {
            severity
            firstPatchedVersion {
              identifier
            }
            package {
              ecosystem
              name
            }
            vulnerableVersionRange
          }
        }`;
    });

    const query = `query {
        ${packageQueries.join('\n')}
    }`;

    const { data } = await this.queryGitHubGraphQL(query);
    return securityVulnerabilities.parse(data);
  }

  private removeHyphens(str: string) {
    return str.replace(/-/g, '_');
  }
}
