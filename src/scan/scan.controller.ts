import {
  BadRequestException,
  Body,
  Controller,
  HttpCode,
  InternalServerErrorException,
  NotImplementedException,
  Post,
} from '@nestjs/common';
import {
  INVALID_DEFINITION_FILE,
  INVALID_OPERATION,
  INVALID_PACKAGE_MANAGER,
  INVALID_VERSION,
} from '../constants/error.constant.js';
import { ScanDependencies } from './dto/scan.dto.js';
import { ScanService } from './scan.service.js';

@Controller('scan')
export class ScanController {
  constructor(private readonly scanService: ScanService) {}

  @Post()
  @HttpCode(200)
  async scanDependencies(@Body() { ecosystem, fileContent }: ScanDependencies) {
    try {
      return this.scanService.scanDependencies(ecosystem, fileContent);
    } catch (error) {
      if (error instanceof Error) {
        if (error.message === INVALID_PACKAGE_MANAGER) {
          throw new NotImplementedException('Invalid package manager');
        } else if (error.message === INVALID_DEFINITION_FILE) {
          throw new BadRequestException('Invalid definition file');
        } else if (error.message === INVALID_OPERATION) {
          throw new InternalServerErrorException('Invalid operation');
        } else if (error.message === INVALID_VERSION) {
          throw new InternalServerErrorException('Invalid version');
        }
      }
    }
  }
}
